max_obstacle_height: 0.8 
robot_radius: 0.33 # ArloBot




laser_layer:
  observation_sources:  laser 
  laser:
    data_type: LaserScan
    topic: /filtered_scan
    marking: true
    clearing: true
    min_obstacle_height: 0.001 #was 0.001
    max_obstacle_height: 2.0
    obstacle_range: 4.0
    raytrace_range: 5.0


# rgbd_obstacle_layer:
#   enabled:               true
#   voxel_decay:           1.0 #20     #seconds if linear, e^n if exponential
#   decay_model:           0      #0=linear, 1=exponential, -1=persistent
#   voxel_size:            0.05   #meters
#   track_unknown_space:   true   #default space is unknown
#   observation_persistence: 0.0  #seconds
#   max_obstacle_height:   1.5 #2.0    #meters
#   unknown_threshold:     15     #voxel height
#   mark_threshold:        0      #voxel height
#   update_footprint_enabled: true
#   combination_method:    1      #1=max, 0=override
#   obstacle_range:        2.5    # default: 2.5 meters
#   origin_z:              0.0    #meters
#   publish_voxel_map:     true   # default off
#   transform_tolerance:   0.2    # seconds
#   mapping_mode:          false  # default off, saves map not for navigation
#   map_save_duration:     60     #default 60s, how often to autosave
#   observation_sources:   rgbd1_clear rgbd1_mark
#   rgbd1_mark:
#     data_type: PointCloud2
#     topic: /camera/depth/points
#     marking: true
#     clearing: false
#     min_obstacle_height: 0.18 #0.3    #default 0, meters
#     max_obstacle_height: 2.0 #2.0     #defaule 3, meters
#     expected_update_rate: 0.0    #default 0, if not updating at this rate at least, remove from buffer
#     observation_persistence: 0.0 #default 0, use all measurements taken during now-value, 0=latest 
#     inf_is_valid: false          #default false, for laser scans
#     clear_after_reading: true    #default false, clear the buffer after the layer gets readings from it
#     voxel_filter: true           #default off, apply voxel filter to sensor, recommend on 
#     voxel_min_points: 0          #default 0, minimum points per voxel for voxel filter
#   rgbd1_clear:
#     enabled: true                #default true, can be toggled on/off with associated service call
#     data_type: PointCloud2
#     topic: /camera/depth/points
#     marking: false
#     clearing: true
#     min_z: 0.1 #0 #0.1                   #default 0, meters
#     max_z: 2.5 #1.5 #3.5 #7.0 #default 10, meters # It could cause not to move if there is an obstacle next to the robot
#     vertical_fov_angle: 1.01 #1.08 #0.7      #default 0.7, radians
#     horizontal_fov_angle: 1.51 #1.29 #1.04   #default 1.04, radians
#     decay_acceleration: 1.0       #default 0, 1/s^2. If laser scanner MUST be 0
#     model_type: 0                #default 0 (depth camera). Use 1 for 3D Lidar


#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns

static_layer:
  enabled:              true
  map_topic:             map
  subscribe_to_updates: true
  track_unknown_space:  true
  
#cost_scaling_factor and inflation_radius were now moved to the inflation_layer ns
inflation_layer:
  enabled:              true
  cost_scaling_factor:   3.0  #was 1.5 exponential rate at which the obstacle cost drops off (default: 10) was 2.58
  inflation_radius:     0.80 # was 0.23 max. distance from an obstacle at which costs are incurred for planning

